///这个问题是一个经典的算法问题，通常被称为“两颗鸡蛋问题”或者“两部手机问题”。
///问题的目标是找到最少的尝试次数，以确定手机从哪一层楼开始会摔坏。这里有一个简化的解决方案：
/// 1. 假设我们有两部手机（或两颗鸡蛋），我们需要找到一个方法来最小化在最坏情况下的测试次数。
/// 2. 我们可以采用二分法，但这样在最坏情况下可能需要测试50次（如果每次都从中间开始测试）。
/// 3. 更好的方法是采用一个固定的间隔数进行测试。例如，我们可以从第10层开始测试，然后第20层，第30层，依此类推。
/// 4. 如果第一个手机在第n*10层摔坏了，那么我们可以用第二个手机从(n-1)*10+1层开始，一层一层地测试，直到找到那个临界点。
/// 5. 为了最小化最坏情况下的测试次数，我们需要平衡间隔距离和逐层测试的次数。这意味着我们应该选择一个间隔，
/// 使得从第一层到间隔层和从间隔层逐层测试到下一个间隔层的总次数大致相同。
///为了找到最优解，我们可以使用数学方法来确定最佳的间隔。如果我们选择间隔为x，则第一次测试在x层，
///第二次在2x层，依此类推，直到kx >= 100，其中k是测试的次数。如果手机在第kx层摔坏了，
///那么最坏情况下的测试次数是k + (x - 1)。为了最小化这个值，我们需要找到一个x，使得k和x的和最小。
/// 通过求解不等式 k(k + 1)/2 >= 100，我们可以找到合适的k值。这个不等式来自于求和公式，
/// 表示我们在第k次测试时至少需要覆盖100层楼。解这个不等式，我们可以找到最小的k值，然后用这个k值来确定最佳的间隔x。
/// 解这个不等式，我们得到k大约是14（实际上是13.651），因此我们可以选择间隔为14层。这意味着我们首先在14层测试，然后28层，42层，
/// 依此类推。如果手机在第n*14层摔坏了，我们再从(n-1)*14+1层开始，一层一层地测试。
/// 这样，在最坏情况下，我们可能需要测试大约14次（如果手机在最后的间隔摔坏），
/// 然后再测试13次（逐层测试），总共不超过27次。这比简单的二分法要好得多，并且是在只有两部手机的情况下的一个有效的策略。